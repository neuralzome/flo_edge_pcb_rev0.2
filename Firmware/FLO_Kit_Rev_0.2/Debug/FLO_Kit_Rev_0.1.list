
FLO_Kit_Rev_0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001f6c  08001f6c  00011f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f9c  08001f9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f9c  08001f9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f9c  08001f9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f9c  08001f9c  00011f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fa0  08001fa0  00011fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08001fb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001fb0  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000042ce  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010f1  00000000  00000000  00024302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004d8  00000000  00000000  000253f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000488  00000000  00000000  000258d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010765  00000000  00000000  00025d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005eb7  00000000  00000000  000364bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000636ad  00000000  00000000  0003c374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009fa21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fbc  00000000  00000000  0009fa74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001f54 	.word	0x08001f54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001f54 	.word	0x08001f54

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <release_vp>:


void press_vp(){
	HAL_GPIO_WritePin(GPIOB, VOLUME_UP_Pin, GPIO_PIN_SET);
}
void release_vp(){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, VOLUME_UP_Pin, GPIO_PIN_RESET);
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <release_vp+0x18>)
 8000226:	2200      	movs	r2, #0
 8000228:	2108      	movs	r1, #8
 800022a:	0018      	movs	r0, r3
 800022c:	f001 fa0b 	bl	8001646 <HAL_GPIO_WritePin>
}
 8000230:	46c0      	nop			; (mov r8, r8)
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	48000400 	.word	0x48000400

0800023c <press_vm>:
void press_vm(){
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, VOLUME_DOWN_Pin, GPIO_PIN_SET);
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <press_vm+0x18>)
 8000242:	2201      	movs	r2, #1
 8000244:	2110      	movs	r1, #16
 8000246:	0018      	movs	r0, r3
 8000248:	f001 f9fd 	bl	8001646 <HAL_GPIO_WritePin>
}
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	48000400 	.word	0x48000400

08000258 <release_vm>:
void release_vm(){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, VOLUME_DOWN_Pin, GPIO_PIN_RESET);
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <release_vm+0x18>)
 800025e:	2200      	movs	r2, #0
 8000260:	2110      	movs	r1, #16
 8000262:	0018      	movs	r0, r3
 8000264:	f001 f9ef 	bl	8001646 <HAL_GPIO_WritePin>
}
 8000268:	46c0      	nop			; (mov r8, r8)
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	48000400 	.word	0x48000400

08000274 <press_p>:
void press_p(){
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, POWER_Pin, GPIO_PIN_SET);
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <press_p+0x18>)
 800027a:	2201      	movs	r2, #1
 800027c:	2120      	movs	r1, #32
 800027e:	0018      	movs	r0, r3
 8000280:	f001 f9e1 	bl	8001646 <HAL_GPIO_WritePin>
}
 8000284:	46c0      	nop			; (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	48000400 	.word	0x48000400

08000290 <release_p>:
void release_p(){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, POWER_Pin, GPIO_PIN_RESET);
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <release_p+0x18>)
 8000296:	2200      	movs	r2, #0
 8000298:	2120      	movs	r1, #32
 800029a:	0018      	movs	r0, r3
 800029c:	f001 f9d3 	bl	8001646 <HAL_GPIO_WritePin>
}
 80002a0:	46c0      	nop			; (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	48000400 	.word	0x48000400

080002ac <set_debug_led>:

/* state 1 means on 0 means off*/
void set_debug_led(int state){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	if(state == 0){
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d107      	bne.n	80002ca <set_debug_led+0x1e>
		// Turn off debug led
		HAL_GPIO_WritePin(GPIOB, DEBUG_LED_Pin, GPIO_PIN_RESET);
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	480a      	ldr	r0, [pc, #40]	; (80002e8 <set_debug_led+0x3c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	0019      	movs	r1, r3
 80002c4:	f001 f9bf 	bl	8001646 <HAL_GPIO_WritePin>
	}else if(state == 1){
		// Turn on debug led
		HAL_GPIO_WritePin(GPIOB, DEBUG_LED_Pin, GPIO_PIN_SET);
	}
}
 80002c8:	e009      	b.n	80002de <set_debug_led+0x32>
	}else if(state == 1){
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d106      	bne.n	80002de <set_debug_led+0x32>
		HAL_GPIO_WritePin(GPIOB, DEBUG_LED_Pin, GPIO_PIN_SET);
 80002d0:	2380      	movs	r3, #128	; 0x80
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	4804      	ldr	r0, [pc, #16]	; (80002e8 <set_debug_led+0x3c>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	0019      	movs	r1, r3
 80002da:	f001 f9b4 	bl	8001646 <HAL_GPIO_WritePin>
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b002      	add	sp, #8
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	48000400 	.word	0x48000400

080002ec <set_rgb_led>:
/*
 * red led is on if r is 1 and off if 0
 * green led is on if g is 1 and off if 0
 * blue led is on if b is 1 and off if 0
 */
void set_rgb_led(int r, int g, int b){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
	if(r == 0){
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d106      	bne.n	800030c <set_rgb_led+0x20>
		HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, GPIO_PIN_RESET);
 80002fe:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <set_rgb_led+0x88>)
 8000300:	2200      	movs	r2, #0
 8000302:	2101      	movs	r1, #1
 8000304:	0018      	movs	r0, r3
 8000306:	f001 f99e 	bl	8001646 <HAL_GPIO_WritePin>
 800030a:	e008      	b.n	800031e <set_rgb_led+0x32>
	}else if(r == 1){
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d105      	bne.n	800031e <set_rgb_led+0x32>
		HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, GPIO_PIN_SET);
 8000312:	4b18      	ldr	r3, [pc, #96]	; (8000374 <set_rgb_led+0x88>)
 8000314:	2201      	movs	r2, #1
 8000316:	2101      	movs	r1, #1
 8000318:	0018      	movs	r0, r3
 800031a:	f001 f994 	bl	8001646 <HAL_GPIO_WritePin>
	}

	if(g == 0){
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d106      	bne.n	8000332 <set_rgb_led+0x46>
		HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000324:	4b13      	ldr	r3, [pc, #76]	; (8000374 <set_rgb_led+0x88>)
 8000326:	2200      	movs	r2, #0
 8000328:	2102      	movs	r1, #2
 800032a:	0018      	movs	r0, r3
 800032c:	f001 f98b 	bl	8001646 <HAL_GPIO_WritePin>
 8000330:	e008      	b.n	8000344 <set_rgb_led+0x58>
	}else if(g == 1){
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d105      	bne.n	8000344 <set_rgb_led+0x58>
		HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, GPIO_PIN_SET);
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <set_rgb_led+0x88>)
 800033a:	2201      	movs	r2, #1
 800033c:	2102      	movs	r1, #2
 800033e:	0018      	movs	r0, r3
 8000340:	f001 f981 	bl	8001646 <HAL_GPIO_WritePin>
	}

	if(b == 0){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d106      	bne.n	8000358 <set_rgb_led+0x6c>
		HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin, GPIO_PIN_RESET);
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <set_rgb_led+0x88>)
 800034c:	2200      	movs	r2, #0
 800034e:	2104      	movs	r1, #4
 8000350:	0018      	movs	r0, r3
 8000352:	f001 f978 	bl	8001646 <HAL_GPIO_WritePin>
	}else if(b == 1){
		HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin, GPIO_PIN_SET);
	}
}
 8000356:	e008      	b.n	800036a <set_rgb_led+0x7e>
	}else if(b == 1){
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d105      	bne.n	800036a <set_rgb_led+0x7e>
		HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin, GPIO_PIN_SET);
 800035e:	4b05      	ldr	r3, [pc, #20]	; (8000374 <set_rgb_led+0x88>)
 8000360:	2201      	movs	r2, #1
 8000362:	2104      	movs	r1, #4
 8000364:	0018      	movs	r0, r3
 8000366:	f001 f96e 	bl	8001646 <HAL_GPIO_WritePin>
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b004      	add	sp, #16
 8000370:	bd80      	pop	{r7, pc}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	48000400 	.word	0x48000400

08000378 <read_push_button>:

/* returns 1 if button is pressed else returns 0*/
int read_push_button(){
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
	GPIO_PinState state = HAL_GPIO_ReadPin(GPIOA, BOOT_BUTTON_Pin);
 800037e:	1cfc      	adds	r4, r7, #3
 8000380:	2390      	movs	r3, #144	; 0x90
 8000382:	05db      	lsls	r3, r3, #23
 8000384:	2140      	movs	r1, #64	; 0x40
 8000386:	0018      	movs	r0, r3
 8000388:	f001 f940 	bl	800160c <HAL_GPIO_ReadPin>
 800038c:	0003      	movs	r3, r0
 800038e:	7023      	strb	r3, [r4, #0]
	int push_button = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	607b      	str	r3, [r7, #4]
	if(state == GPIO_PIN_RESET){
 8000394:	1cfb      	adds	r3, r7, #3
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d102      	bne.n	80003a2 <read_push_button+0x2a>
		push_button = 1;
 800039c:	2301      	movs	r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	e005      	b.n	80003ae <read_push_button+0x36>
	}else if(state == GPIO_PIN_SET){
 80003a2:	1cfb      	adds	r3, r7, #3
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d101      	bne.n	80003ae <read_push_button+0x36>
		push_button = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	607b      	str	r3, [r7, #4]
	}
	return push_button;
 80003ae:	687b      	ldr	r3, [r7, #4]
}
 80003b0:	0018      	movs	r0, r3
 80003b2:	46bd      	mov	sp, r7
 80003b4:	b003      	add	sp, #12
 80003b6:	bd90      	pop	{r4, r7, pc}

080003b8 <read_boot_mode>:

/* returns 0 or 1 based on state*/
int read_boot_mode(){
 80003b8:	b590      	push	{r4, r7, lr}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
	GPIO_PinState state = HAL_GPIO_ReadPin(GPIOA, BOOT_MODE_Pin);
 80003be:	1cfc      	adds	r4, r7, #3
 80003c0:	2390      	movs	r3, #144	; 0x90
 80003c2:	05db      	lsls	r3, r3, #23
 80003c4:	2110      	movs	r1, #16
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 f920 	bl	800160c <HAL_GPIO_ReadPin>
 80003cc:	0003      	movs	r3, r0
 80003ce:	7023      	strb	r3, [r4, #0]
	int boot_mode = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	607b      	str	r3, [r7, #4]
	if(state == GPIO_PIN_RESET){
 80003d4:	1cfb      	adds	r3, r7, #3
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d102      	bne.n	80003e2 <read_boot_mode+0x2a>
		boot_mode = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	e005      	b.n	80003ee <read_boot_mode+0x36>
	}else if(state == GPIO_PIN_SET){
 80003e2:	1cfb      	adds	r3, r7, #3
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d101      	bne.n	80003ee <read_boot_mode+0x36>
		boot_mode = 1;
 80003ea:	2301      	movs	r3, #1
 80003ec:	607b      	str	r3, [r7, #4]
	}
	return boot_mode;
 80003ee:	687b      	ldr	r3, [r7, #4]
}
 80003f0:	0018      	movs	r0, r3
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b003      	add	sp, #12
 80003f6:	bd90      	pop	{r4, r7, pc}

080003f8 <read_haptic>:

/* returns 1 if haptic is on and 0 if off*/
int read_haptic(){
 80003f8:	b590      	push	{r4, r7, lr}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
	GPIO_PinState state = HAL_GPIO_ReadPin(GPIOA, HAPTICS_FB_Pin);
 80003fe:	1cfc      	adds	r4, r7, #3
 8000400:	2380      	movs	r3, #128	; 0x80
 8000402:	021a      	lsls	r2, r3, #8
 8000404:	2390      	movs	r3, #144	; 0x90
 8000406:	05db      	lsls	r3, r3, #23
 8000408:	0011      	movs	r1, r2
 800040a:	0018      	movs	r0, r3
 800040c:	f001 f8fe 	bl	800160c <HAL_GPIO_ReadPin>
 8000410:	0003      	movs	r3, r0
 8000412:	7023      	strb	r3, [r4, #0]
	int haptic = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	607b      	str	r3, [r7, #4]
	if(state == GPIO_PIN_RESET){
 8000418:	1cfb      	adds	r3, r7, #3
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d102      	bne.n	8000426 <read_haptic+0x2e>
		haptic = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	e005      	b.n	8000432 <read_haptic+0x3a>
	}else if(state == GPIO_PIN_SET){
 8000426:	1cfb      	adds	r3, r7, #3
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d101      	bne.n	8000432 <read_haptic+0x3a>
		haptic = 1;
 800042e:	2301      	movs	r3, #1
 8000430:	607b      	str	r3, [r7, #4]
	}
	return haptic;
 8000432:	687b      	ldr	r3, [r7, #4]
}
 8000434:	0018      	movs	r0, r3
 8000436:	46bd      	mov	sp, r7
 8000438:	b003      	add	sp, #12
 800043a:	bd90      	pop	{r4, r7, pc}

0800043c <flo_edge_init>:

void flo_edge_init(){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	release_vp();
 8000440:	f7ff feee 	bl	8000220 <release_vp>
	release_vm();
 8000444:	f7ff ff08 	bl	8000258 <release_vm>
	release_p();
 8000448:	f7ff ff22 	bl	8000290 <release_p>
	set_debug_led(0);
 800044c:	2000      	movs	r0, #0
 800044e:	f7ff ff2d 	bl	80002ac <set_debug_led>
	set_rgb_led(1, 0, 0);
 8000452:	2200      	movs	r2, #0
 8000454:	2100      	movs	r1, #0
 8000456:	2001      	movs	r0, #1
 8000458:	f7ff ff48 	bl	80002ec <set_rgb_led>
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <boot_main>:

void boot_main(){
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
	// 1. Phone on
	int rgb_led_state = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
	unsigned long t = HAL_GetTick();
 800046e:	f000 fc2d 	bl	8000ccc <HAL_GetTick>
 8000472:	0003      	movs	r3, r0
 8000474:	613b      	str	r3, [r7, #16]
	unsigned long t_haptic = HAL_GetTick();
 8000476:	f000 fc29 	bl	8000ccc <HAL_GetTick>
 800047a:	0003      	movs	r3, r0
 800047c:	60fb      	str	r3, [r7, #12]
	while(1){
		if(read_push_button() != 1){
 800047e:	f7ff ff7b 	bl	8000378 <read_push_button>
 8000482:	0003      	movs	r3, r0
 8000484:	2b01      	cmp	r3, #1
 8000486:	d007      	beq.n	8000498 <boot_main+0x34>
			t = HAL_GetTick();
 8000488:	f000 fc20 	bl	8000ccc <HAL_GetTick>
 800048c:	0003      	movs	r3, r0
 800048e:	613b      	str	r3, [r7, #16]
			set_debug_led(0);
 8000490:	2000      	movs	r0, #0
 8000492:	f7ff ff0b 	bl	80002ac <set_debug_led>
 8000496:	e002      	b.n	800049e <boot_main+0x3a>
		}else{
			set_debug_led(1);
 8000498:	2001      	movs	r0, #1
 800049a:	f7ff ff07 	bl	80002ac <set_debug_led>
		}

		if(HAL_GetTick() - t_haptic > TIMEOUT_DURATION_MS){
 800049e:	f000 fc15 	bl	8000ccc <HAL_GetTick>
 80004a2:	0002      	movs	r2, r0
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	1ad3      	subs	r3, r2, r3
 80004a8:	4a4e      	ldr	r2, [pc, #312]	; (80005e4 <boot_main+0x180>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d82e      	bhi.n	800050c <boot_main+0xa8>
			break;
		}

		int haptic = read_haptic();
 80004ae:	f7ff ffa3 	bl	80003f8 <read_haptic>
 80004b2:	0003      	movs	r3, r0
 80004b4:	60bb      	str	r3, [r7, #8]
		if(haptic == 1){
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d115      	bne.n	80004e8 <boot_main+0x84>
			t_haptic = HAL_GetTick();
 80004bc:	f000 fc06 	bl	8000ccc <HAL_GetTick>
 80004c0:	0003      	movs	r3, r0
 80004c2:	60fb      	str	r3, [r7, #12]
			set_rgb_led(0, 1, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2101      	movs	r1, #1
 80004c8:	2000      	movs	r0, #0
 80004ca:	f7ff ff0f 	bl	80002ec <set_rgb_led>
			if(HAL_GetTick() - t > PUSH_BUTTON_PRESS_DURATION_MS){
 80004ce:	f000 fbfd 	bl	8000ccc <HAL_GetTick>
 80004d2:	0002      	movs	r2, r0
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	1ad2      	subs	r2, r2, r3
 80004d8:	23fa      	movs	r3, #250	; 0xfa
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	429a      	cmp	r2, r3
 80004de:	d911      	bls.n	8000504 <boot_main+0xa0>
				set_debug_led(0);
 80004e0:	2000      	movs	r0, #0
 80004e2:	f7ff fee3 	bl	80002ac <set_debug_led>
				break;
 80004e6:	e012      	b.n	800050e <boot_main+0xaa>
			}
		}else{
			if(rgb_led_state == 0){
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d102      	bne.n	80004f4 <boot_main+0x90>
				rgb_led_state = 1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	e001      	b.n	80004f8 <boot_main+0x94>
			}else{
				rgb_led_state = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
			}
			set_rgb_led(rgb_led_state, 0, 0);
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	0018      	movs	r0, r3
 8000500:	f7ff fef4 	bl	80002ec <set_rgb_led>
		}
		HAL_Delay(BLINK_DELAY);
 8000504:	2032      	movs	r0, #50	; 0x32
 8000506:	f000 fbeb 	bl	8000ce0 <HAL_Delay>
	while(1){
 800050a:	e7b8      	b.n	800047e <boot_main+0x1a>
			break;
 800050c:	46c0      	nop			; (mov r8, r8)
	}

	// 2. Red blinking until power button press
	t = HAL_GetTick();
 800050e:	f000 fbdd 	bl	8000ccc <HAL_GetTick>
 8000512:	0003      	movs	r3, r0
 8000514:	613b      	str	r3, [r7, #16]
	press_p();
 8000516:	f7ff fead 	bl	8000274 <press_p>
	rgb_led_state = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
	while(HAL_GetTick() - t < SHUTDOWN_POWER_BUTTON_HOLD_TIME_MS){
 800051e:	e010      	b.n	8000542 <boot_main+0xde>
		if(rgb_led_state == 0){
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d102      	bne.n	800052c <boot_main+0xc8>
			rgb_led_state = 1;
 8000526:	2301      	movs	r3, #1
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	e001      	b.n	8000530 <boot_main+0xcc>
		}else{
			rgb_led_state = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
		}
		set_rgb_led(rgb_led_state, 0, 0);
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	2200      	movs	r2, #0
 8000534:	2100      	movs	r1, #0
 8000536:	0018      	movs	r0, r3
 8000538:	f7ff fed8 	bl	80002ec <set_rgb_led>
		HAL_Delay(BLINK_DELAY);
 800053c:	2032      	movs	r0, #50	; 0x32
 800053e:	f000 fbcf 	bl	8000ce0 <HAL_Delay>
	while(HAL_GetTick() - t < SHUTDOWN_POWER_BUTTON_HOLD_TIME_MS){
 8000542:	f000 fbc3 	bl	8000ccc <HAL_GetTick>
 8000546:	0002      	movs	r2, r0
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	1ad2      	subs	r2, r2, r3
 800054c:	23fa      	movs	r3, #250	; 0xfa
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	429a      	cmp	r2, r3
 8000552:	d3e5      	bcc.n	8000520 <boot_main+0xbc>
	}
	release_p();
 8000554:	f7ff fe9c 	bl	8000290 <release_p>

	// 3. Shutting down
	while(1){
		int haptic = read_haptic();
 8000558:	f7ff ff4e 	bl	80003f8 <read_haptic>
 800055c:	0003      	movs	r3, r0
 800055e:	607b      	str	r3, [r7, #4]
		if(haptic == 0){
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d10c      	bne.n	8000580 <boot_main+0x11c>
			set_rgb_led(1, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	2001      	movs	r0, #1
 800056c:	f7ff febe 	bl	80002ec <set_rgb_led>
			break;
 8000570:	46c0      	nop			; (mov r8, r8)
		}
		HAL_Delay(BLINK_DELAY);
	}

	// 4. Wait for EXTENDED_SHUTDOWN_DURATION
	t = HAL_GetTick();
 8000572:	f000 fbab 	bl	8000ccc <HAL_GetTick>
 8000576:	0003      	movs	r3, r0
 8000578:	613b      	str	r3, [r7, #16]
	rgb_led_state = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
	while(HAL_GetTick() - t < EXTENDED_SHUTDOWN_DURATION_MS){
 800057e:	e022      	b.n	80005c6 <boot_main+0x162>
			if(rgb_led_state == 0){
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d102      	bne.n	800058c <boot_main+0x128>
				rgb_led_state = 1;
 8000586:	2301      	movs	r3, #1
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	e001      	b.n	8000590 <boot_main+0x12c>
				rgb_led_state = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
			set_rgb_led(rgb_led_state, 0, 0);
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	0018      	movs	r0, r3
 8000598:	f7ff fea8 	bl	80002ec <set_rgb_led>
		HAL_Delay(BLINK_DELAY);
 800059c:	2032      	movs	r0, #50	; 0x32
 800059e:	f000 fb9f 	bl	8000ce0 <HAL_Delay>
	while(1){
 80005a2:	e7d9      	b.n	8000558 <boot_main+0xf4>
		if(rgb_led_state == 0){
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d102      	bne.n	80005b0 <boot_main+0x14c>
			rgb_led_state = 1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	e001      	b.n	80005b4 <boot_main+0x150>
		}else{
			rgb_led_state = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
		}
		set_rgb_led(rgb_led_state, 0, 0);
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff fe96 	bl	80002ec <set_rgb_led>
		HAL_Delay(BLINK_DELAY);
 80005c0:	2032      	movs	r0, #50	; 0x32
 80005c2:	f000 fb8d 	bl	8000ce0 <HAL_Delay>
	while(HAL_GetTick() - t < EXTENDED_SHUTDOWN_DURATION_MS){
 80005c6:	f000 fb81 	bl	8000ccc <HAL_GetTick>
 80005ca:	0002      	movs	r2, r0
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	1ad2      	subs	r2, r2, r3
 80005d0:	23fa      	movs	r3, #250	; 0xfa
 80005d2:	015b      	lsls	r3, r3, #5
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3e5      	bcc.n	80005a4 <boot_main+0x140>
	}
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b006      	add	sp, #24
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	00007530 	.word	0x00007530

080005e8 <fastboot_main>:

void fastboot_main(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
	// Fastboot mode
	set_rgb_led(0, 0, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2100      	movs	r1, #0
 80005f2:	2000      	movs	r0, #0
 80005f4:	f7ff fe7a 	bl	80002ec <set_rgb_led>
	unsigned long t = HAL_GetTick();
 80005f8:	f000 fb68 	bl	8000ccc <HAL_GetTick>
 80005fc:	0003      	movs	r3, r0
 80005fe:	60fb      	str	r3, [r7, #12]
	unsigned long t_push_button = HAL_GetTick();
 8000600:	f000 fb64 	bl	8000ccc <HAL_GetTick>
 8000604:	0003      	movs	r3, r0
 8000606:	60bb      	str	r3, [r7, #8]
	while(1){
		if(read_push_button() != 1){
 8000608:	f7ff feb6 	bl	8000378 <read_push_button>
 800060c:	0003      	movs	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	d007      	beq.n	8000622 <fastboot_main+0x3a>
			t_push_button = HAL_GetTick();
 8000612:	f000 fb5b 	bl	8000ccc <HAL_GetTick>
 8000616:	0003      	movs	r3, r0
 8000618:	60bb      	str	r3, [r7, #8]
			set_debug_led(0);
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff fe46 	bl	80002ac <set_debug_led>
 8000620:	e002      	b.n	8000628 <fastboot_main+0x40>
		}else{
			set_debug_led(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff fe42 	bl	80002ac <set_debug_led>
		}

		if(HAL_GetTick() - t_push_button > PUSH_BUTTON_PRESS_DURATION_MS){
 8000628:	f000 fb50 	bl	8000ccc <HAL_GetTick>
 800062c:	0002      	movs	r2, r0
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	1ad2      	subs	r2, r2, r3
 8000632:	23fa      	movs	r3, #250	; 0xfa
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	429a      	cmp	r2, r3
 8000638:	d927      	bls.n	800068a <fastboot_main+0xa2>
			set_debug_led(0);
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff fe36 	bl	80002ac <set_debug_led>

			// Red blinking until power button press
			t = HAL_GetTick();
 8000640:	f000 fb44 	bl	8000ccc <HAL_GetTick>
 8000644:	0003      	movs	r3, r0
 8000646:	60fb      	str	r3, [r7, #12]
			press_p();
 8000648:	f7ff fe14 	bl	8000274 <press_p>
			int rgb_led_state = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
			while(HAL_GetTick() - t < FASTBOOT_TO_BOOT_POWER_BUTTON_HOLD_TIME_MS){
 8000650:	e010      	b.n	8000674 <fastboot_main+0x8c>
				if(rgb_led_state == 0){
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d102      	bne.n	800065e <fastboot_main+0x76>
					rgb_led_state = 1;
 8000658:	2301      	movs	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	e001      	b.n	8000662 <fastboot_main+0x7a>
				}else{
					rgb_led_state = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
				}
				set_rgb_led(rgb_led_state, 0, 0);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	0018      	movs	r0, r3
 800066a:	f7ff fe3f 	bl	80002ec <set_rgb_led>
				HAL_Delay(BLINK_DELAY);
 800066e:	2032      	movs	r0, #50	; 0x32
 8000670:	f000 fb36 	bl	8000ce0 <HAL_Delay>
			while(HAL_GetTick() - t < FASTBOOT_TO_BOOT_POWER_BUTTON_HOLD_TIME_MS){
 8000674:	f000 fb2a 	bl	8000ccc <HAL_GetTick>
 8000678:	0002      	movs	r2, r0
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <fastboot_main+0xdc>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d9e6      	bls.n	8000652 <fastboot_main+0x6a>
			}
			release_p();
 8000684:	f7ff fe04 	bl	8000290 <release_p>

			break;
 8000688:	e018      	b.n	80006bc <fastboot_main+0xd4>
		}

		int haptic = read_haptic();
 800068a:	f7ff feb5 	bl	80003f8 <read_haptic>
 800068e:	0003      	movs	r3, r0
 8000690:	603b      	str	r3, [r7, #0]
		if(haptic == 0){
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d103      	bne.n	80006a0 <fastboot_main+0xb8>
			t = HAL_GetTick();
 8000698:	f000 fb18 	bl	8000ccc <HAL_GetTick>
 800069c:	0003      	movs	r3, r0
 800069e:	60fb      	str	r3, [r7, #12]
		}
		if(HAL_GetTick() - t > 1000){
 80006a0:	f000 fb14 	bl	8000ccc <HAL_GetTick>
 80006a4:	0002      	movs	r2, r0
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	1ad2      	subs	r2, r2, r3
 80006aa:	23fa      	movs	r3, #250	; 0xfa
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d803      	bhi.n	80006ba <fastboot_main+0xd2>
			break;
		}
		HAL_Delay(BLINK_DELAY);
 80006b2:	2032      	movs	r0, #50	; 0x32
 80006b4:	f000 fb14 	bl	8000ce0 <HAL_Delay>
	while(1){
 80006b8:	e7a6      	b.n	8000608 <fastboot_main+0x20>
			break;
 80006ba:	46c0      	nop			; (mov r8, r8)
	}
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b004      	add	sp, #16
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	00001d4b 	.word	0x00001d4b

080006c8 <flo_edge_main>:

void flo_edge_main(){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
	// 1. Wait for boot signal
	unsigned long t = HAL_GetTick();
 80006ce:	f000 fafd 	bl	8000ccc <HAL_GetTick>
 80006d2:	0003      	movs	r3, r0
 80006d4:	60fb      	str	r3, [r7, #12]
	while(1){
		if(HAL_GetTick() - t > PUSH_BUTTON_PRESS_DURATION_MS){
 80006d6:	f000 faf9 	bl	8000ccc <HAL_GetTick>
 80006da:	0002      	movs	r2, r0
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	1ad2      	subs	r2, r2, r3
 80006e0:	23fa      	movs	r3, #250	; 0xfa
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d908      	bls.n	80006fa <flo_edge_main+0x32>
			set_debug_led(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff fddf 	bl	80002ac <set_debug_led>
			break;
 80006ee:	46c0      	nop			; (mov r8, r8)
		}
		HAL_Delay(1);
	}

	// 2. Check whether to boot in normal or fastboot mode
	if(read_boot_mode() == 0){ // normal mode
 80006f0:	f7ff fe62 	bl	80003b8 <read_boot_mode>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d13b      	bne.n	8000770 <flo_edge_main+0xa8>
 80006f8:	e013      	b.n	8000722 <flo_edge_main+0x5a>
		if(read_push_button() != 1){
 80006fa:	f7ff fe3d 	bl	8000378 <read_push_button>
 80006fe:	0003      	movs	r3, r0
 8000700:	2b01      	cmp	r3, #1
 8000702:	d007      	beq.n	8000714 <flo_edge_main+0x4c>
			t = HAL_GetTick();
 8000704:	f000 fae2 	bl	8000ccc <HAL_GetTick>
 8000708:	0003      	movs	r3, r0
 800070a:	60fb      	str	r3, [r7, #12]
			set_debug_led(0);
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff fdcd 	bl	80002ac <set_debug_led>
 8000712:	e002      	b.n	800071a <flo_edge_main+0x52>
			set_debug_led(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f7ff fdc9 	bl	80002ac <set_debug_led>
		HAL_Delay(1);
 800071a:	2001      	movs	r0, #1
 800071c:	f000 fae0 	bl	8000ce0 <HAL_Delay>
		if(HAL_GetTick() - t > PUSH_BUTTON_PRESS_DURATION_MS){
 8000720:	e7d9      	b.n	80006d6 <flo_edge_main+0xe>
		// Red blinking until power button press
		t = HAL_GetTick();
 8000722:	f000 fad3 	bl	8000ccc <HAL_GetTick>
 8000726:	0003      	movs	r3, r0
 8000728:	60fb      	str	r3, [r7, #12]
		press_p();
 800072a:	f7ff fda3 	bl	8000274 <press_p>
		int rgb_led_state = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
		while(HAL_GetTick() - t < BOOT_POWER_BUTTON_HOLD_TIME_MS){
 8000732:	e010      	b.n	8000756 <flo_edge_main+0x8e>
			if(rgb_led_state == 0){
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d102      	bne.n	8000740 <flo_edge_main+0x78>
				rgb_led_state = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	e001      	b.n	8000744 <flo_edge_main+0x7c>
			}else{
				rgb_led_state = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
			}
			set_rgb_led(rgb_led_state, 0, 0);
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	0018      	movs	r0, r3
 800074c:	f7ff fdce 	bl	80002ec <set_rgb_led>
			HAL_Delay(BLINK_DELAY);
 8000750:	2032      	movs	r0, #50	; 0x32
 8000752:	f000 fac5 	bl	8000ce0 <HAL_Delay>
		while(HAL_GetTick() - t < BOOT_POWER_BUTTON_HOLD_TIME_MS){
 8000756:	f000 fab9 	bl	8000ccc <HAL_GetTick>
 800075a:	0002      	movs	r2, r0
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	4a1e      	ldr	r2, [pc, #120]	; (80007dc <flo_edge_main+0x114>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d9e6      	bls.n	8000734 <flo_edge_main+0x6c>
		}
		release_p();
 8000766:	f7ff fd93 	bl	8000290 <release_p>

		boot_main();
 800076a:	f7ff fe7b 	bl	8000464 <boot_main>
		release_vm();

		fastboot_main();
		boot_main();
	}
}
 800076e:	e030      	b.n	80007d2 <flo_edge_main+0x10a>
	}else if(read_boot_mode() == 1){// fastboot mode
 8000770:	f7ff fe22 	bl	80003b8 <read_boot_mode>
 8000774:	0003      	movs	r3, r0
 8000776:	2b01      	cmp	r3, #1
 8000778:	d12b      	bne.n	80007d2 <flo_edge_main+0x10a>
		t = HAL_GetTick();
 800077a:	f000 faa7 	bl	8000ccc <HAL_GetTick>
 800077e:	0003      	movs	r3, r0
 8000780:	60fb      	str	r3, [r7, #12]
		press_p();
 8000782:	f7ff fd77 	bl	8000274 <press_p>
		press_vm();
 8000786:	f7ff fd59 	bl	800023c <press_vm>
		int rgb_led_state = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
		while(HAL_GetTick() - t < FASTBOOT_POWER_BUTTON_HOLD_TIME_MS){
 800078e:	e010      	b.n	80007b2 <flo_edge_main+0xea>
			if(rgb_led_state == 0){
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d102      	bne.n	800079c <flo_edge_main+0xd4>
				rgb_led_state = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	e001      	b.n	80007a0 <flo_edge_main+0xd8>
				rgb_led_state = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
			set_rgb_led(rgb_led_state, 0, 0);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	0018      	movs	r0, r3
 80007a8:	f7ff fda0 	bl	80002ec <set_rgb_led>
			HAL_Delay(BLINK_DELAY);
 80007ac:	2032      	movs	r0, #50	; 0x32
 80007ae:	f000 fa97 	bl	8000ce0 <HAL_Delay>
		while(HAL_GetTick() - t < FASTBOOT_POWER_BUTTON_HOLD_TIME_MS){
 80007b2:	f000 fa8b 	bl	8000ccc <HAL_GetTick>
 80007b6:	0002      	movs	r2, r0
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <flo_edge_main+0x118>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d9e6      	bls.n	8000790 <flo_edge_main+0xc8>
		release_p();
 80007c2:	f7ff fd65 	bl	8000290 <release_p>
		release_vm();
 80007c6:	f7ff fd47 	bl	8000258 <release_vm>
		fastboot_main();
 80007ca:	f7ff ff0d 	bl	80005e8 <fastboot_main>
		boot_main();
 80007ce:	f7ff fe49 	bl	8000464 <boot_main>
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b004      	add	sp, #16
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	0000176f 	.word	0x0000176f
 80007e0:	00001963 	.word	0x00001963

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e8:	f000 fa16 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ec:	f000 f809 	bl	8000802 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f0:	f000 f8b4 	bl	800095c <MX_GPIO_Init>
  MX_ADC_Init();
 80007f4:	f000 f856 	bl	80008a4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  flo_edge_init();
 80007f8:	f7ff fe20 	bl	800043c <flo_edge_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	flo_edge_main();
 80007fc:	f7ff ff64 	bl	80006c8 <flo_edge_main>
 8000800:	e7fc      	b.n	80007fc <main+0x18>

08000802 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000802:	b590      	push	{r4, r7, lr}
 8000804:	b091      	sub	sp, #68	; 0x44
 8000806:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000808:	2410      	movs	r4, #16
 800080a:	193b      	adds	r3, r7, r4
 800080c:	0018      	movs	r0, r3
 800080e:	2330      	movs	r3, #48	; 0x30
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f001 fb96 	bl	8001f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	003b      	movs	r3, r7
 800081a:	0018      	movs	r0, r3
 800081c:	2310      	movs	r3, #16
 800081e:	001a      	movs	r2, r3
 8000820:	2100      	movs	r1, #0
 8000822:	f001 fb8f 	bl	8001f44 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000826:	0021      	movs	r1, r4
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2212      	movs	r2, #18
 800082c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2201      	movs	r2, #1
 8000832:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2201      	movs	r2, #1
 8000838:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2210      	movs	r2, #16
 800083e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2210      	movs	r2, #16
 8000844:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2202      	movs	r2, #2
 800084a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	0312      	lsls	r2, r2, #12
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2200      	movs	r2, #0
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	187b      	adds	r3, r7, r1
 8000862:	0018      	movs	r0, r3
 8000864:	f000 ff0c 	bl	8001680 <HAL_RCC_OscConfig>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800086c:	f000 f91e 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000870:	003b      	movs	r3, r7
 8000872:	2207      	movs	r2, #7
 8000874:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	003b      	movs	r3, r7
 8000878:	2202      	movs	r2, #2
 800087a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	003b      	movs	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000882:	003b      	movs	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000888:	003b      	movs	r3, r7
 800088a:	2100      	movs	r1, #0
 800088c:	0018      	movs	r0, r3
 800088e:	f001 fa11 	bl	8001cb4 <HAL_RCC_ClockConfig>
 8000892:	1e03      	subs	r3, r0, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000896:	f000 f909 	bl	8000aac <Error_Handler>
  }
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b011      	add	sp, #68	; 0x44
 80008a0:	bd90      	pop	{r4, r7, pc}
	...

080008a4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	0018      	movs	r0, r3
 80008ae:	230c      	movs	r3, #12
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f001 fb46 	bl	8001f44 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80008b8:	4b26      	ldr	r3, [pc, #152]	; (8000954 <MX_ADC_Init+0xb0>)
 80008ba:	4a27      	ldr	r2, [pc, #156]	; (8000958 <MX_ADC_Init+0xb4>)
 80008bc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008be:	4b25      	ldr	r3, [pc, #148]	; (8000954 <MX_ADC_Init+0xb0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <MX_ADC_Init+0xb0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MX_ADC_Init+0xb0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008d0:	4b20      	ldr	r3, [pc, #128]	; (8000954 <MX_ADC_Init+0xb0>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <MX_ADC_Init+0xb0>)
 80008d8:	2204      	movs	r2, #4
 80008da:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_ADC_Init+0xb0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MX_ADC_Init+0xb0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_ADC_Init+0xb0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_ADC_Init+0xb0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_ADC_Init+0xb0>)
 80008f6:	22c2      	movs	r2, #194	; 0xc2
 80008f8:	32ff      	adds	r2, #255	; 0xff
 80008fa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_ADC_Init+0xb0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_ADC_Init+0xb0>)
 8000904:	2224      	movs	r2, #36	; 0x24
 8000906:	2100      	movs	r1, #0
 8000908:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_ADC_Init+0xb0>)
 800090c:	2201      	movs	r2, #1
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_ADC_Init+0xb0>)
 8000912:	0018      	movs	r0, r3
 8000914:	f000 fa08 	bl	8000d28 <HAL_ADC_Init>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800091c:	f000 f8c6 	bl	8000aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	0152      	lsls	r2, r2, #5
 800092c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	0552      	lsls	r2, r2, #21
 8000934:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000936:	1d3a      	adds	r2, r7, #4
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_ADC_Init+0xb0>)
 800093a:	0011      	movs	r1, r2
 800093c:	0018      	movs	r0, r3
 800093e:	f000 fb33 	bl	8000fa8 <HAL_ADC_ConfigChannel>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000946:	f000 f8b1 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b004      	add	sp, #16
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	20000028 	.word	0x20000028
 8000958:	40012400 	.word	0x40012400

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b089      	sub	sp, #36	; 0x24
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	240c      	movs	r4, #12
 8000964:	193b      	adds	r3, r7, r4
 8000966:	0018      	movs	r0, r3
 8000968:	2314      	movs	r3, #20
 800096a:	001a      	movs	r2, r3
 800096c:	2100      	movs	r1, #0
 800096e:	f001 fae9 	bl	8001f44 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000972:	4b4b      	ldr	r3, [pc, #300]	; (8000aa0 <MX_GPIO_Init+0x144>)
 8000974:	695a      	ldr	r2, [r3, #20]
 8000976:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <MX_GPIO_Init+0x144>)
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	03c9      	lsls	r1, r1, #15
 800097c:	430a      	orrs	r2, r1
 800097e:	615a      	str	r2, [r3, #20]
 8000980:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <MX_GPIO_Init+0x144>)
 8000982:	695a      	ldr	r2, [r3, #20]
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	03db      	lsls	r3, r3, #15
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b44      	ldr	r3, [pc, #272]	; (8000aa0 <MX_GPIO_Init+0x144>)
 8000990:	695a      	ldr	r2, [r3, #20]
 8000992:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <MX_GPIO_Init+0x144>)
 8000994:	2180      	movs	r1, #128	; 0x80
 8000996:	0289      	lsls	r1, r1, #10
 8000998:	430a      	orrs	r2, r1
 800099a:	615a      	str	r2, [r3, #20]
 800099c:	4b40      	ldr	r3, [pc, #256]	; (8000aa0 <MX_GPIO_Init+0x144>)
 800099e:	695a      	ldr	r2, [r3, #20]
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	029b      	lsls	r3, r3, #10
 80009a4:	4013      	ands	r3, r2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b3d      	ldr	r3, [pc, #244]	; (8000aa0 <MX_GPIO_Init+0x144>)
 80009ac:	695a      	ldr	r2, [r3, #20]
 80009ae:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <MX_GPIO_Init+0x144>)
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	02c9      	lsls	r1, r1, #11
 80009b4:	430a      	orrs	r2, r1
 80009b6:	615a      	str	r2, [r3, #20]
 80009b8:	4b39      	ldr	r3, [pc, #228]	; (8000aa0 <MX_GPIO_Init+0x144>)
 80009ba:	695a      	ldr	r2, [r3, #20]
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	02db      	lsls	r3, r3, #11
 80009c0:	4013      	ands	r3, r2
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|GREEN_LED_Pin|BLUE_LED_Pin|GPIO_PIN_15
 80009c6:	4937      	ldr	r1, [pc, #220]	; (8000aa4 <MX_GPIO_Init+0x148>)
 80009c8:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <MX_GPIO_Init+0x14c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	0018      	movs	r0, r3
 80009ce:	f000 fe3a 	bl	8001646 <HAL_GPIO_WritePin>
                          |VOLUME_UP_Pin|VOLUME_DOWN_Pin|POWER_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_PWM_GPIO_Port, FAN_PWM_Pin, GPIO_PIN_RESET);
 80009d2:	2380      	movs	r3, #128	; 0x80
 80009d4:	0159      	lsls	r1, r3, #5
 80009d6:	2390      	movs	r3, #144	; 0x90
 80009d8:	05db      	lsls	r3, r3, #23
 80009da:	2200      	movs	r2, #0
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fe32 	bl	8001646 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOOT_MODE_Pin */
  GPIO_InitStruct.Pin = BOOT_MODE_Pin;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2210      	movs	r2, #16
 80009e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	2200      	movs	r2, #0
 80009ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT_MODE_GPIO_Port, &GPIO_InitStruct);
 80009f4:	193a      	adds	r2, r7, r4
 80009f6:	2390      	movs	r3, #144	; 0x90
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	0011      	movs	r1, r2
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 fc95 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_BUTTON_Pin */
  GPIO_InitStruct.Pin = BOOT_BUTTON_Pin;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2240      	movs	r2, #64	; 0x40
 8000a06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2201      	movs	r2, #1
 8000a12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a14:	193a      	adds	r2, r7, r4
 8000a16:	2390      	movs	r3, #144	; 0x90
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 fc85 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin BLUE_LED_Pin PB15
                           VOLUME_UP_Pin VOLUME_DOWN_Pin POWER_Pin DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin|BLUE_LED_Pin|GPIO_PIN_15
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <MX_GPIO_Init+0x148>)
 8000a26:	601a      	str	r2, [r3, #0]
                          |VOLUME_UP_Pin|VOLUME_DOWN_Pin|POWER_Pin|DEBUG_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <MX_GPIO_Init+0x14c>)
 8000a3e:	0019      	movs	r1, r3
 8000a40:	0010      	movs	r0, r2
 8000a42:	f000 fc73 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : FAN_PWM_Pin */
  GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8000a46:	0021      	movs	r1, r4
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	0152      	lsls	r2, r2, #5
 8000a4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	000c      	movs	r4, r1
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	2201      	movs	r2, #1
 8000a56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8000a64:	193a      	adds	r2, r7, r4
 8000a66:	2390      	movs	r3, #144	; 0x90
 8000a68:	05db      	lsls	r3, r3, #23
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f000 fc5d 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : HAPTICS_FB_Pin */
  GPIO_InitStruct.Pin = HAPTICS_FB_Pin;
 8000a72:	0021      	movs	r1, r4
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	0212      	lsls	r2, r2, #8
 8000a7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2202      	movs	r2, #2
 8000a86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HAPTICS_FB_GPIO_Port, &GPIO_InitStruct);
 8000a88:	187a      	adds	r2, r7, r1
 8000a8a:	2390      	movs	r3, #144	; 0x90
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fc4b 	bl	800132c <HAL_GPIO_Init>

}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b009      	add	sp, #36	; 0x24
 8000a9c:	bd90      	pop	{r4, r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	0000813f 	.word	0x0000813f
 8000aa8:	48000400 	.word	0x48000400

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_MspInit+0x44>)
 8000ac0:	699a      	ldr	r2, [r3, #24]
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_MspInit+0x44>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	619a      	str	r2, [r3, #24]
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <HAL_MspInit+0x44>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x44>)
 8000ad8:	69da      	ldr	r2, [r3, #28]
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_MspInit+0x44>)
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	0549      	lsls	r1, r1, #21
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	61da      	str	r2, [r3, #28]
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_MspInit+0x44>)
 8000ae6:	69da      	ldr	r2, [r3, #28]
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	055b      	lsls	r3, r3, #21
 8000aec:	4013      	ands	r3, r2
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b002      	add	sp, #8
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b08b      	sub	sp, #44	; 0x2c
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	2414      	movs	r4, #20
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	2314      	movs	r3, #20
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f001 fa16 	bl	8001f44 <memset>
  if(hadc->Instance==ADC1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <HAL_ADC_MspInit+0x84>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12b      	bne.n	8000b7a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_ADC_MspInit+0x88>)
 8000b24:	699a      	ldr	r2, [r3, #24]
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_ADC_MspInit+0x88>)
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	0089      	lsls	r1, r1, #2
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	619a      	str	r2, [r3, #24]
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_ADC_MspInit+0x88>)
 8000b32:	699a      	ldr	r2, [r3, #24]
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_ADC_MspInit+0x88>)
 8000b40:	695a      	ldr	r2, [r3, #20]
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_ADC_MspInit+0x88>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	0289      	lsls	r1, r1, #10
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	615a      	str	r2, [r3, #20]
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_ADC_MspInit+0x88>)
 8000b4e:	695a      	ldr	r2, [r3, #20]
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	029b      	lsls	r3, r3, #10
 8000b54:	4013      	ands	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2203      	movs	r2, #3
 8000b64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	193a      	adds	r2, r7, r4
 8000b6e:	2390      	movs	r3, #144	; 0x90
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 fbd9 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b00b      	add	sp, #44	; 0x2c
 8000b80:	bd90      	pop	{r4, r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	40012400 	.word	0x40012400
 8000b88:	40021000 	.word	0x40021000

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <NMI_Handler+0x4>

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f87a 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc6:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000bc8:	f7ff fff7 	bl	8000bba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	; (8000c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <LoopForever+0xe>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	; (8000c10 <LoopForever+0x16>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bf2:	f001 f983 	bl	8001efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf6:	f7ff fdf5 	bl	80007e4 <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   r0, =_estack
 8000bfc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c08:	08001fa4 	.word	0x08001fa4
  ldr r2, =_sbss
 8000c0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c10:	2000006c 	.word	0x2000006c

08000c14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_COMP_IRQHandler>
	...

08000c18 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <HAL_Init+0x24>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_Init+0x24>)
 8000c22:	2110      	movs	r1, #16
 8000c24:	430a      	orrs	r2, r1
 8000c26:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f809 	bl	8000c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2e:	f7ff ff43 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40022000 	.word	0x40022000

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_InitTick+0x5c>)
 8000c4a:	681c      	ldr	r4, [r3, #0]
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_InitTick+0x60>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	0019      	movs	r1, r3
 8000c52:	23fa      	movs	r3, #250	; 0xfa
 8000c54:	0098      	lsls	r0, r3, #2
 8000c56:	f7ff fa57 	bl	8000108 <__udivsi3>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	0020      	movs	r0, r4
 8000c60:	f7ff fa52 	bl	8000108 <__udivsi3>
 8000c64:	0003      	movs	r3, r0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fb53 	bl	8001312 <HAL_SYSTICK_Config>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e00f      	b.n	8000c94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d80b      	bhi.n	8000c92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	425b      	negs	r3, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 fb30 	bl	80012e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_InitTick+0x64>)
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b003      	add	sp, #12
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_IncTick+0x1c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	18d2      	adds	r2, r2, r3
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cba:	601a      	str	r2, [r3, #0]
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000068 	.word	0x20000068

08000ccc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <HAL_GetTick+0x10>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	20000068 	.word	0x20000068

08000ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff fff0 	bl	8000ccc <HAL_GetTick>
 8000cec:	0003      	movs	r3, r0
 8000cee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	d005      	beq.n	8000d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_Delay+0x44>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	001a      	movs	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	189b      	adds	r3, r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	f7ff ffe0 	bl	8000ccc <HAL_GetTick>
 8000d0c:	0002      	movs	r2, r0
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d8f7      	bhi.n	8000d08 <HAL_Delay+0x28>
  {
  }
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b004      	add	sp, #16
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	20000008 	.word	0x20000008

08000d28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d30:	230f      	movs	r3, #15
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e125      	b.n	8000f92 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10a      	bne.n	8000d64 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2234      	movs	r2, #52	; 0x34
 8000d58:	2100      	movs	r1, #0
 8000d5a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fece 	bl	8000b00 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d68:	2210      	movs	r2, #16
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	d000      	beq.n	8000d70 <HAL_ADC_Init+0x48>
 8000d6e:	e103      	b.n	8000f78 <HAL_ADC_Init+0x250>
 8000d70:	230f      	movs	r3, #15
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d000      	beq.n	8000d7c <HAL_ADC_Init+0x54>
 8000d7a:	e0fd      	b.n	8000f78 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	2204      	movs	r2, #4
 8000d84:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000d86:	d000      	beq.n	8000d8a <HAL_ADC_Init+0x62>
 8000d88:	e0f6      	b.n	8000f78 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d8e:	4a83      	ldr	r2, [pc, #524]	; (8000f9c <HAL_ADC_Init+0x274>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	2202      	movs	r2, #2
 8000d94:	431a      	orrs	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	2203      	movs	r2, #3
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d112      	bne.n	8000dce <HAL_ADC_Init+0xa6>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2201      	movs	r2, #1
 8000db0:	4013      	ands	r3, r2
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d009      	beq.n	8000dca <HAL_ADC_Init+0xa2>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	021b      	lsls	r3, r3, #8
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d101      	bne.n	8000dce <HAL_ADC_Init+0xa6>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <HAL_ADC_Init+0xa8>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d116      	bne.n	8000e02 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	2218      	movs	r2, #24
 8000ddc:	4393      	bics	r3, r2
 8000dde:	0019      	movs	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	0899      	lsrs	r1, r3, #2
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4964      	ldr	r1, [pc, #400]	; (8000fa0 <HAL_ADC_Init+0x278>)
 8000e0e:	400a      	ands	r2, r1
 8000e10:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7e1b      	ldrb	r3, [r3, #24]
 8000e16:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7e5b      	ldrb	r3, [r3, #25]
 8000e1c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e1e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7e9b      	ldrb	r3, [r3, #26]
 8000e24:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e26:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d002      	beq.n	8000e36 <HAL_ADC_Init+0x10e>
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	015b      	lsls	r3, r3, #5
 8000e34:	e000      	b.n	8000e38 <HAL_ADC_Init+0x110>
 8000e36:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e38:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e3e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d101      	bne.n	8000e4c <HAL_ADC_Init+0x124>
 8000e48:	2304      	movs	r3, #4
 8000e4a:	e000      	b.n	8000e4e <HAL_ADC_Init+0x126>
 8000e4c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000e4e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2124      	movs	r1, #36	; 0x24
 8000e54:	5c5b      	ldrb	r3, [r3, r1]
 8000e56:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e58:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7edb      	ldrb	r3, [r3, #27]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d115      	bne.n	8000e94 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7e9b      	ldrb	r3, [r3, #26]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d105      	bne.n	8000e7c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	0252      	lsls	r2, r2, #9
 8000e76:	4313      	orrs	r3, r2
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	e00b      	b.n	8000e94 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e80:	2220      	movs	r2, #32
 8000e82:	431a      	orrs	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69da      	ldr	r2, [r3, #28]
 8000e98:	23c2      	movs	r3, #194	; 0xc2
 8000e9a:	33ff      	adds	r3, #255	; 0xff
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d007      	beq.n	8000eb0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68d9      	ldr	r1, [r3, #12]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	055b      	lsls	r3, r3, #21
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d01b      	beq.n	8000f04 <HAL_ADC_Init+0x1dc>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d017      	beq.n	8000f04 <HAL_ADC_Init+0x1dc>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d013      	beq.n	8000f04 <HAL_ADC_Init+0x1dc>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d00f      	beq.n	8000f04 <HAL_ADC_Init+0x1dc>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d00b      	beq.n	8000f04 <HAL_ADC_Init+0x1dc>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	d007      	beq.n	8000f04 <HAL_ADC_Init+0x1dc>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	2b06      	cmp	r3, #6
 8000efa:	d003      	beq.n	8000f04 <HAL_ADC_Init+0x1dc>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	2b07      	cmp	r3, #7
 8000f02:	d112      	bne.n	8000f2a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	695a      	ldr	r2, [r3, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2107      	movs	r1, #7
 8000f10:	438a      	bics	r2, r1
 8000f12:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6959      	ldr	r1, [r3, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1e:	2207      	movs	r2, #7
 8000f20:	401a      	ands	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	4a1c      	ldr	r2, [pc, #112]	; (8000fa4 <HAL_ADC_Init+0x27c>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d10b      	bne.n	8000f52 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f44:	2203      	movs	r2, #3
 8000f46:	4393      	bics	r3, r2
 8000f48:	2201      	movs	r2, #1
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f50:	e01c      	b.n	8000f8c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f56:	2212      	movs	r2, #18
 8000f58:	4393      	bics	r3, r2
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f66:	2201      	movs	r2, #1
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000f6e:	230f      	movs	r3, #15
 8000f70:	18fb      	adds	r3, r7, r3
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f76:	e009      	b.n	8000f8c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000f84:	230f      	movs	r3, #15
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	781b      	ldrb	r3, [r3, #0]
}
 8000f92:	0018      	movs	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b004      	add	sp, #16
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	fffffefd 	.word	0xfffffefd
 8000fa0:	fffe0219 	.word	0xfffe0219
 8000fa4:	833fffe7 	.word	0x833fffe7

08000fa8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	055b      	lsls	r3, r3, #21
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d011      	beq.n	8000fee <HAL_ADC_ConfigChannel+0x46>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d00d      	beq.n	8000fee <HAL_ADC_ConfigChannel+0x46>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d009      	beq.n	8000fee <HAL_ADC_ConfigChannel+0x46>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d005      	beq.n	8000fee <HAL_ADC_ConfigChannel+0x46>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d001      	beq.n	8000fee <HAL_ADC_ConfigChannel+0x46>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2234      	movs	r2, #52	; 0x34
 8000ff2:	5c9b      	ldrb	r3, [r3, r2]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x54>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e0d0      	b.n	800119e <HAL_ADC_ConfigChannel+0x1f6>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2234      	movs	r2, #52	; 0x34
 8001000:	2101      	movs	r1, #1
 8001002:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2204      	movs	r2, #4
 800100c:	4013      	ands	r3, r2
 800100e:	d000      	beq.n	8001012 <HAL_ADC_ConfigChannel+0x6a>
 8001010:	e0b4      	b.n	800117c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a64      	ldr	r2, [pc, #400]	; (80011a8 <HAL_ADC_ConfigChannel+0x200>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d100      	bne.n	800101e <HAL_ADC_ConfigChannel+0x76>
 800101c:	e082      	b.n	8001124 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2201      	movs	r2, #1
 800102a:	409a      	lsls	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	055b      	lsls	r3, r3, #21
 800103c:	429a      	cmp	r2, r3
 800103e:	d037      	beq.n	80010b0 <HAL_ADC_ConfigChannel+0x108>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001044:	2b01      	cmp	r3, #1
 8001046:	d033      	beq.n	80010b0 <HAL_ADC_ConfigChannel+0x108>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104c:	2b02      	cmp	r3, #2
 800104e:	d02f      	beq.n	80010b0 <HAL_ADC_ConfigChannel+0x108>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001054:	2b03      	cmp	r3, #3
 8001056:	d02b      	beq.n	80010b0 <HAL_ADC_ConfigChannel+0x108>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	2b04      	cmp	r3, #4
 800105e:	d027      	beq.n	80010b0 <HAL_ADC_ConfigChannel+0x108>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001064:	2b05      	cmp	r3, #5
 8001066:	d023      	beq.n	80010b0 <HAL_ADC_ConfigChannel+0x108>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106c:	2b06      	cmp	r3, #6
 800106e:	d01f      	beq.n	80010b0 <HAL_ADC_ConfigChannel+0x108>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001074:	2b07      	cmp	r3, #7
 8001076:	d01b      	beq.n	80010b0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	2107      	movs	r1, #7
 8001084:	400b      	ands	r3, r1
 8001086:	429a      	cmp	r2, r3
 8001088:	d012      	beq.n	80010b0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2107      	movs	r1, #7
 8001096:	438a      	bics	r2, r1
 8001098:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6959      	ldr	r1, [r3, #20]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2207      	movs	r2, #7
 80010a6:	401a      	ands	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b10      	cmp	r3, #16
 80010b6:	d007      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x120>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b11      	cmp	r3, #17
 80010be:	d003      	beq.n	80010c8 <HAL_ADC_ConfigChannel+0x120>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b12      	cmp	r3, #18
 80010c6:	d163      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80010c8:	4b38      	ldr	r3, [pc, #224]	; (80011ac <HAL_ADC_ConfigChannel+0x204>)
 80010ca:	6819      	ldr	r1, [r3, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b10      	cmp	r3, #16
 80010d2:	d009      	beq.n	80010e8 <HAL_ADC_ConfigChannel+0x140>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b11      	cmp	r3, #17
 80010da:	d102      	bne.n	80010e2 <HAL_ADC_ConfigChannel+0x13a>
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	03db      	lsls	r3, r3, #15
 80010e0:	e004      	b.n	80010ec <HAL_ADC_ConfigChannel+0x144>
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	045b      	lsls	r3, r3, #17
 80010e6:	e001      	b.n	80010ec <HAL_ADC_ConfigChannel+0x144>
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	041b      	lsls	r3, r3, #16
 80010ec:	4a2f      	ldr	r2, [pc, #188]	; (80011ac <HAL_ADC_ConfigChannel+0x204>)
 80010ee:	430b      	orrs	r3, r1
 80010f0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b10      	cmp	r3, #16
 80010f8:	d14a      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_ADC_ConfigChannel+0x208>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	492d      	ldr	r1, [pc, #180]	; (80011b4 <HAL_ADC_ConfigChannel+0x20c>)
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff f801 	bl	8000108 <__udivsi3>
 8001106:	0003      	movs	r3, r0
 8001108:	001a      	movs	r2, r3
 800110a:	0013      	movs	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	189b      	adds	r3, r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001114:	e002      	b.n	800111c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3b01      	subs	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f9      	bne.n	8001116 <HAL_ADC_ConfigChannel+0x16e>
 8001122:	e035      	b.n	8001190 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2101      	movs	r1, #1
 8001130:	4099      	lsls	r1, r3
 8001132:	000b      	movs	r3, r1
 8001134:	43d9      	mvns	r1, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	400a      	ands	r2, r1
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b10      	cmp	r3, #16
 8001144:	d007      	beq.n	8001156 <HAL_ADC_ConfigChannel+0x1ae>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b11      	cmp	r3, #17
 800114c:	d003      	beq.n	8001156 <HAL_ADC_ConfigChannel+0x1ae>
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b12      	cmp	r3, #18
 8001154:	d11c      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_ADC_ConfigChannel+0x204>)
 8001158:	6819      	ldr	r1, [r3, #0]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b10      	cmp	r3, #16
 8001160:	d007      	beq.n	8001172 <HAL_ADC_ConfigChannel+0x1ca>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b11      	cmp	r3, #17
 8001168:	d101      	bne.n	800116e <HAL_ADC_ConfigChannel+0x1c6>
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_ADC_ConfigChannel+0x210>)
 800116c:	e002      	b.n	8001174 <HAL_ADC_ConfigChannel+0x1cc>
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <HAL_ADC_ConfigChannel+0x214>)
 8001170:	e000      	b.n	8001174 <HAL_ADC_ConfigChannel+0x1cc>
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_ADC_ConfigChannel+0x218>)
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <HAL_ADC_ConfigChannel+0x204>)
 8001176:	400b      	ands	r3, r1
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e009      	b.n	8001190 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001180:	2220      	movs	r2, #32
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001188:	230f      	movs	r3, #15
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2234      	movs	r2, #52	; 0x34
 8001194:	2100      	movs	r1, #0
 8001196:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	781b      	ldrb	r3, [r3, #0]
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b004      	add	sp, #16
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	00001001 	.word	0x00001001
 80011ac:	40012708 	.word	0x40012708
 80011b0:	20000000 	.word	0x20000000
 80011b4:	000f4240 	.word	0x000f4240
 80011b8:	ffbfffff 	.word	0xffbfffff
 80011bc:	feffffff 	.word	0xfeffffff
 80011c0:	ff7fffff 	.word	0xff7fffff

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	0002      	movs	r2, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b7f      	cmp	r3, #127	; 0x7f
 80011d8:	d828      	bhi.n	800122c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011da:	4a2f      	ldr	r2, [pc, #188]	; (8001298 <__NVIC_SetPriority+0xd4>)
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	33c0      	adds	r3, #192	; 0xc0
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	589b      	ldr	r3, [r3, r2]
 80011ea:	1dfa      	adds	r2, r7, #7
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	0011      	movs	r1, r2
 80011f0:	2203      	movs	r2, #3
 80011f2:	400a      	ands	r2, r1
 80011f4:	00d2      	lsls	r2, r2, #3
 80011f6:	21ff      	movs	r1, #255	; 0xff
 80011f8:	4091      	lsls	r1, r2
 80011fa:	000a      	movs	r2, r1
 80011fc:	43d2      	mvns	r2, r2
 80011fe:	401a      	ands	r2, r3
 8001200:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	019b      	lsls	r3, r3, #6
 8001206:	22ff      	movs	r2, #255	; 0xff
 8001208:	401a      	ands	r2, r3
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	0018      	movs	r0, r3
 8001210:	2303      	movs	r3, #3
 8001212:	4003      	ands	r3, r0
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001218:	481f      	ldr	r0, [pc, #124]	; (8001298 <__NVIC_SetPriority+0xd4>)
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b25b      	sxtb	r3, r3
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	430a      	orrs	r2, r1
 8001224:	33c0      	adds	r3, #192	; 0xc0
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800122a:	e031      	b.n	8001290 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800122c:	4a1b      	ldr	r2, [pc, #108]	; (800129c <__NVIC_SetPriority+0xd8>)
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	0019      	movs	r1, r3
 8001234:	230f      	movs	r3, #15
 8001236:	400b      	ands	r3, r1
 8001238:	3b08      	subs	r3, #8
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	3306      	adds	r3, #6
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	18d3      	adds	r3, r2, r3
 8001242:	3304      	adds	r3, #4
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	1dfa      	adds	r2, r7, #7
 8001248:	7812      	ldrb	r2, [r2, #0]
 800124a:	0011      	movs	r1, r2
 800124c:	2203      	movs	r2, #3
 800124e:	400a      	ands	r2, r1
 8001250:	00d2      	lsls	r2, r2, #3
 8001252:	21ff      	movs	r1, #255	; 0xff
 8001254:	4091      	lsls	r1, r2
 8001256:	000a      	movs	r2, r1
 8001258:	43d2      	mvns	r2, r2
 800125a:	401a      	ands	r2, r3
 800125c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	019b      	lsls	r3, r3, #6
 8001262:	22ff      	movs	r2, #255	; 0xff
 8001264:	401a      	ands	r2, r3
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	0018      	movs	r0, r3
 800126c:	2303      	movs	r3, #3
 800126e:	4003      	ands	r3, r0
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <__NVIC_SetPriority+0xd8>)
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	001c      	movs	r4, r3
 800127c:	230f      	movs	r3, #15
 800127e:	4023      	ands	r3, r4
 8001280:	3b08      	subs	r3, #8
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	430a      	orrs	r2, r1
 8001286:	3306      	adds	r3, #6
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	18c3      	adds	r3, r0, r3
 800128c:	3304      	adds	r3, #4
 800128e:	601a      	str	r2, [r3, #0]
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b003      	add	sp, #12
 8001296:	bd90      	pop	{r4, r7, pc}
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1e5a      	subs	r2, r3, #1
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	045b      	lsls	r3, r3, #17
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d301      	bcc.n	80012b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b4:	2301      	movs	r3, #1
 80012b6:	e010      	b.n	80012da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <SysTick_Config+0x44>)
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	3a01      	subs	r2, #1
 80012be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c0:	2301      	movs	r3, #1
 80012c2:	425b      	negs	r3, r3
 80012c4:	2103      	movs	r1, #3
 80012c6:	0018      	movs	r0, r3
 80012c8:	f7ff ff7c 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <SysTick_Config+0x44>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SysTick_Config+0x44>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	0018      	movs	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	b002      	add	sp, #8
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	210f      	movs	r1, #15
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	1c02      	adds	r2, r0, #0
 80012f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b25b      	sxtb	r3, r3
 8001302:	0011      	movs	r1, r2
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff ff5d 	bl	80011c4 <__NVIC_SetPriority>
}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	b004      	add	sp, #16
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff ffbf 	bl	80012a0 <SysTick_Config>
 8001322:	0003      	movs	r3, r0
}
 8001324:	0018      	movs	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	b002      	add	sp, #8
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	e14f      	b.n	80015dc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	4091      	lsls	r1, r2
 8001346:	000a      	movs	r2, r1
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d100      	bne.n	8001354 <HAL_GPIO_Init+0x28>
 8001352:	e140      	b.n	80015d6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2203      	movs	r2, #3
 800135a:	4013      	ands	r3, r2
 800135c:	2b01      	cmp	r3, #1
 800135e:	d005      	beq.n	800136c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2203      	movs	r2, #3
 8001366:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001368:	2b02      	cmp	r3, #2
 800136a:	d130      	bne.n	80013ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	409a      	lsls	r2, r3
 800137a:	0013      	movs	r3, r2
 800137c:	43da      	mvns	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	409a      	lsls	r2, r3
 800138e:	0013      	movs	r3, r2
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a2:	2201      	movs	r2, #1
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	43da      	mvns	r2, r3
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	2201      	movs	r2, #1
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
 80013c0:	0013      	movs	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2203      	movs	r2, #3
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d017      	beq.n	800140a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	409a      	lsls	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	43da      	mvns	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2203      	movs	r2, #3
 8001410:	4013      	ands	r3, r2
 8001412:	2b02      	cmp	r3, #2
 8001414:	d123      	bne.n	800145e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	08da      	lsrs	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3208      	adds	r2, #8
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	58d3      	ldr	r3, [r2, r3]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2207      	movs	r2, #7
 8001428:	4013      	ands	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	220f      	movs	r2, #15
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	43da      	mvns	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	691a      	ldr	r2, [r3, #16]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2107      	movs	r1, #7
 8001442:	400b      	ands	r3, r1
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	08da      	lsrs	r2, r3, #3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3208      	adds	r2, #8
 8001458:	0092      	lsls	r2, r2, #2
 800145a:	6939      	ldr	r1, [r7, #16]
 800145c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	43da      	mvns	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2203      	movs	r2, #3
 800147c:	401a      	ands	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	409a      	lsls	r2, r3
 8001484:	0013      	movs	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	23c0      	movs	r3, #192	; 0xc0
 8001498:	029b      	lsls	r3, r3, #10
 800149a:	4013      	ands	r3, r2
 800149c:	d100      	bne.n	80014a0 <HAL_GPIO_Init+0x174>
 800149e:	e09a      	b.n	80015d6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a0:	4b54      	ldr	r3, [pc, #336]	; (80015f4 <HAL_GPIO_Init+0x2c8>)
 80014a2:	699a      	ldr	r2, [r3, #24]
 80014a4:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_GPIO_Init+0x2c8>)
 80014a6:	2101      	movs	r1, #1
 80014a8:	430a      	orrs	r2, r1
 80014aa:	619a      	str	r2, [r3, #24]
 80014ac:	4b51      	ldr	r3, [pc, #324]	; (80015f4 <HAL_GPIO_Init+0x2c8>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4013      	ands	r3, r2
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b8:	4a4f      	ldr	r2, [pc, #316]	; (80015f8 <HAL_GPIO_Init+0x2cc>)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	589b      	ldr	r3, [r3, r2]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2203      	movs	r2, #3
 80014ca:	4013      	ands	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	409a      	lsls	r2, r3
 80014d2:	0013      	movs	r3, r2
 80014d4:	43da      	mvns	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	2390      	movs	r3, #144	; 0x90
 80014e0:	05db      	lsls	r3, r3, #23
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d013      	beq.n	800150e <HAL_GPIO_Init+0x1e2>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a44      	ldr	r2, [pc, #272]	; (80015fc <HAL_GPIO_Init+0x2d0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00d      	beq.n	800150a <HAL_GPIO_Init+0x1de>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a43      	ldr	r2, [pc, #268]	; (8001600 <HAL_GPIO_Init+0x2d4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d007      	beq.n	8001506 <HAL_GPIO_Init+0x1da>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a42      	ldr	r2, [pc, #264]	; (8001604 <HAL_GPIO_Init+0x2d8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d101      	bne.n	8001502 <HAL_GPIO_Init+0x1d6>
 80014fe:	2303      	movs	r3, #3
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x1e4>
 8001502:	2305      	movs	r3, #5
 8001504:	e004      	b.n	8001510 <HAL_GPIO_Init+0x1e4>
 8001506:	2302      	movs	r3, #2
 8001508:	e002      	b.n	8001510 <HAL_GPIO_Init+0x1e4>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_GPIO_Init+0x1e4>
 800150e:	2300      	movs	r3, #0
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	2103      	movs	r1, #3
 8001514:	400a      	ands	r2, r1
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	4093      	lsls	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001520:	4935      	ldr	r1, [pc, #212]	; (80015f8 <HAL_GPIO_Init+0x2cc>)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152e:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_GPIO_Init+0x2dc>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43da      	mvns	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	035b      	lsls	r3, r3, #13
 8001546:	4013      	ands	r3, r2
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001552:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_GPIO_Init+0x2dc>)
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <HAL_GPIO_Init+0x2dc>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43da      	mvns	r2, r3
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	039b      	lsls	r3, r3, #14
 8001570:	4013      	ands	r3, r2
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_GPIO_Init+0x2dc>)
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <HAL_GPIO_Init+0x2dc>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43da      	mvns	r2, r3
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	029b      	lsls	r3, r3, #10
 800159a:	4013      	ands	r3, r2
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_GPIO_Init+0x2dc>)
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_GPIO_Init+0x2dc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43da      	mvns	r2, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	025b      	lsls	r3, r3, #9
 80015c4:	4013      	ands	r3, r2
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_GPIO_Init+0x2dc>)
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	40da      	lsrs	r2, r3
 80015e4:	1e13      	subs	r3, r2, #0
 80015e6:	d000      	beq.n	80015ea <HAL_GPIO_Init+0x2be>
 80015e8:	e6a8      	b.n	800133c <HAL_GPIO_Init+0x10>
  } 
}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b006      	add	sp, #24
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010000 	.word	0x40010000
 80015fc:	48000400 	.word	0x48000400
 8001600:	48000800 	.word	0x48000800
 8001604:	48000c00 	.word	0x48000c00
 8001608:	40010400 	.word	0x40010400

0800160c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	000a      	movs	r2, r1
 8001616:	1cbb      	adds	r3, r7, #2
 8001618:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	1cba      	adds	r2, r7, #2
 8001620:	8812      	ldrh	r2, [r2, #0]
 8001622:	4013      	ands	r3, r2
 8001624:	d004      	beq.n	8001630 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001626:	230f      	movs	r3, #15
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	e003      	b.n	8001638 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001630:	230f      	movs	r3, #15
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001638:	230f      	movs	r3, #15
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	781b      	ldrb	r3, [r3, #0]
  }
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	b004      	add	sp, #16
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	0008      	movs	r0, r1
 8001650:	0011      	movs	r1, r2
 8001652:	1cbb      	adds	r3, r7, #2
 8001654:	1c02      	adds	r2, r0, #0
 8001656:	801a      	strh	r2, [r3, #0]
 8001658:	1c7b      	adds	r3, r7, #1
 800165a:	1c0a      	adds	r2, r1, #0
 800165c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165e:	1c7b      	adds	r3, r7, #1
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d004      	beq.n	8001670 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001666:	1cbb      	adds	r3, r7, #2
 8001668:	881a      	ldrh	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800166e:	e003      	b.n	8001678 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001670:	1cbb      	adds	r3, r7, #2
 8001672:	881a      	ldrh	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e301      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2201      	movs	r2, #1
 8001698:	4013      	ands	r3, r2
 800169a:	d100      	bne.n	800169e <HAL_RCC_OscConfig+0x1e>
 800169c:	e08d      	b.n	80017ba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800169e:	4bc3      	ldr	r3, [pc, #780]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	220c      	movs	r2, #12
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d00e      	beq.n	80016c8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016aa:	4bc0      	ldr	r3, [pc, #768]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	220c      	movs	r2, #12
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d116      	bne.n	80016e4 <HAL_RCC_OscConfig+0x64>
 80016b6:	4bbd      	ldr	r3, [pc, #756]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	025b      	lsls	r3, r3, #9
 80016be:	401a      	ands	r2, r3
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d10d      	bne.n	80016e4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	4bb8      	ldr	r3, [pc, #736]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	029b      	lsls	r3, r3, #10
 80016d0:	4013      	ands	r3, r2
 80016d2:	d100      	bne.n	80016d6 <HAL_RCC_OscConfig+0x56>
 80016d4:	e070      	b.n	80017b8 <HAL_RCC_OscConfig+0x138>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d000      	beq.n	80016e0 <HAL_RCC_OscConfig+0x60>
 80016de:	e06b      	b.n	80017b8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e2d8      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d107      	bne.n	80016fc <HAL_RCC_OscConfig+0x7c>
 80016ec:	4baf      	ldr	r3, [pc, #700]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4bae      	ldr	r3, [pc, #696]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0249      	lsls	r1, r1, #9
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e02f      	b.n	800175c <HAL_RCC_OscConfig+0xdc>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10c      	bne.n	800171e <HAL_RCC_OscConfig+0x9e>
 8001704:	4ba9      	ldr	r3, [pc, #676]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4ba8      	ldr	r3, [pc, #672]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 800170a:	49a9      	ldr	r1, [pc, #676]	; (80019b0 <HAL_RCC_OscConfig+0x330>)
 800170c:	400a      	ands	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	4ba6      	ldr	r3, [pc, #664]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4ba5      	ldr	r3, [pc, #660]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001716:	49a7      	ldr	r1, [pc, #668]	; (80019b4 <HAL_RCC_OscConfig+0x334>)
 8001718:	400a      	ands	r2, r1
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	e01e      	b.n	800175c <HAL_RCC_OscConfig+0xdc>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b05      	cmp	r3, #5
 8001724:	d10e      	bne.n	8001744 <HAL_RCC_OscConfig+0xc4>
 8001726:	4ba1      	ldr	r3, [pc, #644]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4ba0      	ldr	r3, [pc, #640]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	02c9      	lsls	r1, r1, #11
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	4b9d      	ldr	r3, [pc, #628]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b9c      	ldr	r3, [pc, #624]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 800173a:	2180      	movs	r1, #128	; 0x80
 800173c:	0249      	lsls	r1, r1, #9
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e00b      	b.n	800175c <HAL_RCC_OscConfig+0xdc>
 8001744:	4b99      	ldr	r3, [pc, #612]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b98      	ldr	r3, [pc, #608]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 800174a:	4999      	ldr	r1, [pc, #612]	; (80019b0 <HAL_RCC_OscConfig+0x330>)
 800174c:	400a      	ands	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	4b96      	ldr	r3, [pc, #600]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b95      	ldr	r3, [pc, #596]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001756:	4997      	ldr	r1, [pc, #604]	; (80019b4 <HAL_RCC_OscConfig+0x334>)
 8001758:	400a      	ands	r2, r1
 800175a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d014      	beq.n	800178e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fab2 	bl	8000ccc <HAL_GetTick>
 8001768:	0003      	movs	r3, r0
 800176a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176e:	f7ff faad 	bl	8000ccc <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b64      	cmp	r3, #100	; 0x64
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e28a      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001780:	4b8a      	ldr	r3, [pc, #552]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	029b      	lsls	r3, r3, #10
 8001788:	4013      	ands	r3, r2
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0xee>
 800178c:	e015      	b.n	80017ba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff fa9d 	bl	8000ccc <HAL_GetTick>
 8001792:	0003      	movs	r3, r0
 8001794:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fa98 	bl	8000ccc <HAL_GetTick>
 800179c:	0002      	movs	r2, r0
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e275      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	4b80      	ldr	r3, [pc, #512]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	029b      	lsls	r3, r3, #10
 80017b2:	4013      	ands	r3, r2
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x118>
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2202      	movs	r2, #2
 80017c0:	4013      	ands	r3, r2
 80017c2:	d100      	bne.n	80017c6 <HAL_RCC_OscConfig+0x146>
 80017c4:	e069      	b.n	800189a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017c6:	4b79      	ldr	r3, [pc, #484]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	220c      	movs	r2, #12
 80017cc:	4013      	ands	r3, r2
 80017ce:	d00b      	beq.n	80017e8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017d0:	4b76      	ldr	r3, [pc, #472]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	220c      	movs	r2, #12
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d11c      	bne.n	8001816 <HAL_RCC_OscConfig+0x196>
 80017dc:	4b73      	ldr	r3, [pc, #460]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	025b      	lsls	r3, r3, #9
 80017e4:	4013      	ands	r3, r2
 80017e6:	d116      	bne.n	8001816 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e8:	4b70      	ldr	r3, [pc, #448]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d005      	beq.n	80017fe <HAL_RCC_OscConfig+0x17e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d001      	beq.n	80017fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e24b      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fe:	4b6b      	ldr	r3, [pc, #428]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	22f8      	movs	r2, #248	; 0xf8
 8001804:	4393      	bics	r3, r2
 8001806:	0019      	movs	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	00da      	lsls	r2, r3, #3
 800180e:	4b67      	ldr	r3, [pc, #412]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001814:	e041      	b.n	800189a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d024      	beq.n	8001868 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800181e:	4b63      	ldr	r3, [pc, #396]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b62      	ldr	r3, [pc, #392]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001824:	2101      	movs	r1, #1
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fa4f 	bl	8000ccc <HAL_GetTick>
 800182e:	0003      	movs	r3, r0
 8001830:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001834:	f7ff fa4a 	bl	8000ccc <HAL_GetTick>
 8001838:	0002      	movs	r2, r0
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e227      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b59      	ldr	r3, [pc, #356]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2202      	movs	r2, #2
 800184c:	4013      	ands	r3, r2
 800184e:	d0f1      	beq.n	8001834 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b56      	ldr	r3, [pc, #344]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	22f8      	movs	r2, #248	; 0xf8
 8001856:	4393      	bics	r3, r2
 8001858:	0019      	movs	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	00da      	lsls	r2, r3, #3
 8001860:	4b52      	ldr	r3, [pc, #328]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	e018      	b.n	800189a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b4f      	ldr	r3, [pc, #316]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 800186e:	2101      	movs	r1, #1
 8001870:	438a      	bics	r2, r1
 8001872:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fa2a 	bl	8000ccc <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187e:	f7ff fa25 	bl	8000ccc <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e202      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001890:	4b46      	ldr	r3, [pc, #280]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2202      	movs	r2, #2
 8001896:	4013      	ands	r3, r2
 8001898:	d1f1      	bne.n	800187e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2208      	movs	r2, #8
 80018a0:	4013      	ands	r3, r2
 80018a2:	d036      	beq.n	8001912 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d019      	beq.n	80018e0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ac:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80018ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018b0:	4b3e      	ldr	r3, [pc, #248]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80018b2:	2101      	movs	r1, #1
 80018b4:	430a      	orrs	r2, r1
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b8:	f7ff fa08 	bl	8000ccc <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c2:	f7ff fa03 	bl	8000ccc <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1e0      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d4:	4b35      	ldr	r3, [pc, #212]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	2202      	movs	r2, #2
 80018da:	4013      	ands	r3, r2
 80018dc:	d0f1      	beq.n	80018c2 <HAL_RCC_OscConfig+0x242>
 80018de:	e018      	b.n	8001912 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e0:	4b32      	ldr	r3, [pc, #200]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80018e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e4:	4b31      	ldr	r3, [pc, #196]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	438a      	bics	r2, r1
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ec:	f7ff f9ee 	bl	8000ccc <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f6:	f7ff f9e9 	bl	8000ccc <HAL_GetTick>
 80018fa:	0002      	movs	r2, r0
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e1c6      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001908:	4b28      	ldr	r3, [pc, #160]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	2202      	movs	r2, #2
 800190e:	4013      	ands	r3, r2
 8001910:	d1f1      	bne.n	80018f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2204      	movs	r2, #4
 8001918:	4013      	ands	r3, r2
 800191a:	d100      	bne.n	800191e <HAL_RCC_OscConfig+0x29e>
 800191c:	e0b4      	b.n	8001a88 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191e:	201f      	movs	r0, #31
 8001920:	183b      	adds	r3, r7, r0
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	055b      	lsls	r3, r3, #21
 800192e:	4013      	ands	r3, r2
 8001930:	d110      	bne.n	8001954 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001934:	69da      	ldr	r2, [r3, #28]
 8001936:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	0549      	lsls	r1, r1, #21
 800193c:	430a      	orrs	r2, r1
 800193e:	61da      	str	r2, [r3, #28]
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	055b      	lsls	r3, r3, #21
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800194e:	183b      	adds	r3, r7, r0
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4013      	ands	r3, r2
 800195e:	d11a      	bne.n	8001996 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	0049      	lsls	r1, r1, #1
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196e:	f7ff f9ad 	bl	8000ccc <HAL_GetTick>
 8001972:	0003      	movs	r3, r0
 8001974:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001978:	f7ff f9a8 	bl	8000ccc <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e185      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_RCC_OscConfig+0x338>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4013      	ands	r3, r2
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d10e      	bne.n	80019bc <HAL_RCC_OscConfig+0x33c>
 800199e:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80019a0:	6a1a      	ldr	r2, [r3, #32]
 80019a2:	4b02      	ldr	r3, [pc, #8]	; (80019ac <HAL_RCC_OscConfig+0x32c>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	430a      	orrs	r2, r1
 80019a8:	621a      	str	r2, [r3, #32]
 80019aa:	e035      	b.n	8001a18 <HAL_RCC_OscConfig+0x398>
 80019ac:	40021000 	.word	0x40021000
 80019b0:	fffeffff 	.word	0xfffeffff
 80019b4:	fffbffff 	.word	0xfffbffff
 80019b8:	40007000 	.word	0x40007000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10c      	bne.n	80019de <HAL_RCC_OscConfig+0x35e>
 80019c4:	4bb6      	ldr	r3, [pc, #728]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 80019c6:	6a1a      	ldr	r2, [r3, #32]
 80019c8:	4bb5      	ldr	r3, [pc, #724]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 80019ca:	2101      	movs	r1, #1
 80019cc:	438a      	bics	r2, r1
 80019ce:	621a      	str	r2, [r3, #32]
 80019d0:	4bb3      	ldr	r3, [pc, #716]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 80019d2:	6a1a      	ldr	r2, [r3, #32]
 80019d4:	4bb2      	ldr	r3, [pc, #712]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 80019d6:	2104      	movs	r1, #4
 80019d8:	438a      	bics	r2, r1
 80019da:	621a      	str	r2, [r3, #32]
 80019dc:	e01c      	b.n	8001a18 <HAL_RCC_OscConfig+0x398>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x380>
 80019e6:	4bae      	ldr	r3, [pc, #696]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 80019e8:	6a1a      	ldr	r2, [r3, #32]
 80019ea:	4bad      	ldr	r3, [pc, #692]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 80019ec:	2104      	movs	r1, #4
 80019ee:	430a      	orrs	r2, r1
 80019f0:	621a      	str	r2, [r3, #32]
 80019f2:	4bab      	ldr	r3, [pc, #684]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 80019f4:	6a1a      	ldr	r2, [r3, #32]
 80019f6:	4baa      	ldr	r3, [pc, #680]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 80019f8:	2101      	movs	r1, #1
 80019fa:	430a      	orrs	r2, r1
 80019fc:	621a      	str	r2, [r3, #32]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0x398>
 8001a00:	4ba7      	ldr	r3, [pc, #668]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001a02:	6a1a      	ldr	r2, [r3, #32]
 8001a04:	4ba6      	ldr	r3, [pc, #664]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	438a      	bics	r2, r1
 8001a0a:	621a      	str	r2, [r3, #32]
 8001a0c:	4ba4      	ldr	r3, [pc, #656]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001a0e:	6a1a      	ldr	r2, [r3, #32]
 8001a10:	4ba3      	ldr	r3, [pc, #652]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001a12:	2104      	movs	r1, #4
 8001a14:	438a      	bics	r2, r1
 8001a16:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d014      	beq.n	8001a4a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a20:	f7ff f954 	bl	8000ccc <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a28:	e009      	b.n	8001a3e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff f94f 	bl	8000ccc <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	4a9b      	ldr	r2, [pc, #620]	; (8001ca4 <HAL_RCC_OscConfig+0x624>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e12b      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3e:	4b98      	ldr	r3, [pc, #608]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	2202      	movs	r2, #2
 8001a44:	4013      	ands	r3, r2
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x3aa>
 8001a48:	e013      	b.n	8001a72 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff f93f 	bl	8000ccc <HAL_GetTick>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a52:	e009      	b.n	8001a68 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f7ff f93a 	bl	8000ccc <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	4a91      	ldr	r2, [pc, #580]	; (8001ca4 <HAL_RCC_OscConfig+0x624>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e116      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	4b8d      	ldr	r3, [pc, #564]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a72:	231f      	movs	r3, #31
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d105      	bne.n	8001a88 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7c:	4b88      	ldr	r3, [pc, #544]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001a7e:	69da      	ldr	r2, [r3, #28]
 8001a80:	4b87      	ldr	r3, [pc, #540]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001a82:	4989      	ldr	r1, [pc, #548]	; (8001ca8 <HAL_RCC_OscConfig+0x628>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d063      	beq.n	8001b5a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d12a      	bne.n	8001af0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a9a:	4b81      	ldr	r3, [pc, #516]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a9e:	4b80      	ldr	r3, [pc, #512]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001aa6:	4b7e      	ldr	r3, [pc, #504]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aaa:	4b7d      	ldr	r3, [pc, #500]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001aac:	2101      	movs	r1, #1
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff f90b 	bl	8000ccc <HAL_GetTick>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001abc:	f7ff f906 	bl	8000ccc <HAL_GetTick>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0e3      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ace:	4b74      	ldr	r3, [pc, #464]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d0f1      	beq.n	8001abc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ad8:	4b71      	ldr	r3, [pc, #452]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001adc:	22f8      	movs	r2, #248	; 0xf8
 8001ade:	4393      	bics	r3, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	00da      	lsls	r2, r3, #3
 8001ae8:	4b6d      	ldr	r3, [pc, #436]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001aea:	430a      	orrs	r2, r1
 8001aec:	635a      	str	r2, [r3, #52]	; 0x34
 8001aee:	e034      	b.n	8001b5a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	3305      	adds	r3, #5
 8001af6:	d111      	bne.n	8001b1c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001af8:	4b69      	ldr	r3, [pc, #420]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001afc:	4b68      	ldr	r3, [pc, #416]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001afe:	2104      	movs	r1, #4
 8001b00:	438a      	bics	r2, r1
 8001b02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b04:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b08:	22f8      	movs	r2, #248	; 0xf8
 8001b0a:	4393      	bics	r3, r2
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	00da      	lsls	r2, r3, #3
 8001b14:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001b16:	430a      	orrs	r2, r1
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34
 8001b1a:	e01e      	b.n	8001b5a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b1c:	4b60      	ldr	r3, [pc, #384]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b20:	4b5f      	ldr	r3, [pc, #380]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001b22:	2104      	movs	r1, #4
 8001b24:	430a      	orrs	r2, r1
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b28:	4b5d      	ldr	r3, [pc, #372]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001b2e:	2101      	movs	r1, #1
 8001b30:	438a      	bics	r2, r1
 8001b32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b34:	f7ff f8ca 	bl	8000ccc <HAL_GetTick>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b3e:	f7ff f8c5 	bl	8000ccc <HAL_GetTick>
 8001b42:	0002      	movs	r2, r0
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e0a2      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b50:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b54:	2202      	movs	r2, #2
 8001b56:	4013      	ands	r3, r2
 8001b58:	d1f1      	bne.n	8001b3e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d100      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4e4>
 8001b62:	e097      	b.n	8001c94 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b64:	4b4e      	ldr	r3, [pc, #312]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	220c      	movs	r2, #12
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d100      	bne.n	8001b72 <HAL_RCC_OscConfig+0x4f2>
 8001b70:	e06b      	b.n	8001c4a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d14c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b48      	ldr	r3, [pc, #288]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001b80:	494a      	ldr	r1, [pc, #296]	; (8001cac <HAL_RCC_OscConfig+0x62c>)
 8001b82:	400a      	ands	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7ff f8a1 	bl	8000ccc <HAL_GetTick>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b90:	f7ff f89c 	bl	8000ccc <HAL_GetTick>
 8001b94:	0002      	movs	r2, r0
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e079      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba2:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	049b      	lsls	r3, r3, #18
 8001baa:	4013      	ands	r3, r2
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bae:	4b3c      	ldr	r3, [pc, #240]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	4393      	bics	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbc:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bc2:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4a3a      	ldr	r2, [pc, #232]	; (8001cb0 <HAL_RCC_OscConfig+0x630>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	4b32      	ldr	r3, [pc, #200]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bdc:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001be2:	2180      	movs	r1, #128	; 0x80
 8001be4:	0449      	lsls	r1, r1, #17
 8001be6:	430a      	orrs	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7ff f86f 	bl	8000ccc <HAL_GetTick>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff f86a 	bl	8000ccc <HAL_GetTick>
 8001bf8:	0002      	movs	r2, r0
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e047      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c06:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	049b      	lsls	r3, r3, #18
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x574>
 8001c12:	e03f      	b.n	8001c94 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c14:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001c1a:	4924      	ldr	r1, [pc, #144]	; (8001cac <HAL_RCC_OscConfig+0x62c>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff f854 	bl	8000ccc <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7ff f84f 	bl	8000ccc <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e02c      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	049b      	lsls	r3, r3, #18
 8001c44:	4013      	ands	r3, r2
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5aa>
 8001c48:	e024      	b.n	8001c94 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e01f      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_RCC_OscConfig+0x620>)
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	025b      	lsls	r3, r3, #9
 8001c68:	401a      	ands	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d10e      	bne.n	8001c90 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	220f      	movs	r2, #15
 8001c76:	401a      	ands	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d107      	bne.n	8001c90 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	23f0      	movs	r3, #240	; 0xf0
 8001c84:	039b      	lsls	r3, r3, #14
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	0018      	movs	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b008      	add	sp, #32
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	00001388 	.word	0x00001388
 8001ca8:	efffffff 	.word	0xefffffff
 8001cac:	feffffff 	.word	0xfeffffff
 8001cb0:	ffc2ffff 	.word	0xffc2ffff

08001cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0b3      	b.n	8001e30 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b5b      	ldr	r3, [pc, #364]	; (8001e38 <HAL_RCC_ClockConfig+0x184>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d911      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b58      	ldr	r3, [pc, #352]	; (8001e38 <HAL_RCC_ClockConfig+0x184>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4393      	bics	r3, r2
 8001cde:	0019      	movs	r1, r3
 8001ce0:	4b55      	ldr	r3, [pc, #340]	; (8001e38 <HAL_RCC_ClockConfig+0x184>)
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce8:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_ClockConfig+0x184>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2201      	movs	r2, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e09a      	b.n	8001e30 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	4013      	ands	r3, r2
 8001d02:	d015      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d006      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d0e:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <HAL_RCC_ClockConfig+0x188>)
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <HAL_RCC_ClockConfig+0x188>)
 8001d14:	21e0      	movs	r1, #224	; 0xe0
 8001d16:	00c9      	lsls	r1, r1, #3
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d1c:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <HAL_RCC_ClockConfig+0x188>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	22f0      	movs	r2, #240	; 0xf0
 8001d22:	4393      	bics	r3, r2
 8001d24:	0019      	movs	r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <HAL_RCC_ClockConfig+0x188>)
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4013      	ands	r3, r2
 8001d38:	d040      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <HAL_RCC_ClockConfig+0x188>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	029b      	lsls	r3, r3, #10
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d114      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e06e      	b.n	8001e30 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5a:	4b38      	ldr	r3, [pc, #224]	; (8001e3c <HAL_RCC_ClockConfig+0x188>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	049b      	lsls	r3, r3, #18
 8001d62:	4013      	ands	r3, r2
 8001d64:	d108      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e062      	b.n	8001e30 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6a:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <HAL_RCC_ClockConfig+0x188>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e05b      	b.n	8001e30 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d78:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_RCC_ClockConfig+0x188>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	4393      	bics	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_RCC_ClockConfig+0x188>)
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d8c:	f7fe ff9e 	bl	8000ccc <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d94:	e009      	b.n	8001daa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d96:	f7fe ff99 	bl	8000ccc <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	4a27      	ldr	r2, [pc, #156]	; (8001e40 <HAL_RCC_ClockConfig+0x18c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e042      	b.n	8001e30 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <HAL_RCC_ClockConfig+0x188>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	220c      	movs	r2, #12
 8001db0:	401a      	ands	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d1ec      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <HAL_RCC_ClockConfig+0x184>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d211      	bcs.n	8001dee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_RCC_ClockConfig+0x184>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_RCC_ClockConfig+0x184>)
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <HAL_RCC_ClockConfig+0x184>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2201      	movs	r2, #1
 8001de2:	4013      	ands	r3, r2
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e020      	b.n	8001e30 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2204      	movs	r2, #4
 8001df4:	4013      	ands	r3, r2
 8001df6:	d009      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_RCC_ClockConfig+0x188>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <HAL_RCC_ClockConfig+0x190>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	0019      	movs	r1, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_RCC_ClockConfig+0x188>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e0c:	f000 f820 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001e10:	0001      	movs	r1, r0
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_RCC_ClockConfig+0x188>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	220f      	movs	r2, #15
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <HAL_RCC_ClockConfig+0x194>)
 8001e1e:	5cd3      	ldrb	r3, [r2, r3]
 8001e20:	000a      	movs	r2, r1
 8001e22:	40da      	lsrs	r2, r3
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_RCC_ClockConfig+0x198>)
 8001e26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f7fe ff09 	bl	8000c40 <HAL_InitTick>
  
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b004      	add	sp, #16
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40022000 	.word	0x40022000
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	00001388 	.word	0x00001388
 8001e44:	fffff8ff 	.word	0xfffff8ff
 8001e48:	08001f6c 	.word	0x08001f6c
 8001e4c:	20000000 	.word	0x20000000

08001e50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	220c      	movs	r2, #12
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d002      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x30>
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d003      	beq.n	8001e86 <HAL_RCC_GetSysClockFreq+0x36>
 8001e7e:	e02c      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e82:	613b      	str	r3, [r7, #16]
      break;
 8001e84:	e02c      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	0c9b      	lsrs	r3, r3, #18
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e90:	5cd3      	ldrb	r3, [r2, r3]
 8001e92:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	220f      	movs	r2, #15
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	4a16      	ldr	r2, [pc, #88]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	025b      	lsls	r3, r3, #9
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d009      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	4810      	ldr	r0, [pc, #64]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001eb0:	f7fe f92a 	bl	8000108 <__udivsi3>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	001a      	movs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4353      	muls	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	e009      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	000a      	movs	r2, r1
 8001ec4:	0152      	lsls	r2, r2, #5
 8001ec6:	1a52      	subs	r2, r2, r1
 8001ec8:	0193      	lsls	r3, r2, #6
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	185b      	adds	r3, r3, r1
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
      break;
 8001ed8:	e002      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001edc:	613b      	str	r3, [r7, #16]
      break;
 8001ede:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ee0:	693b      	ldr	r3, [r7, #16]
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b006      	add	sp, #24
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	007a1200 	.word	0x007a1200
 8001ef4:	08001f7c 	.word	0x08001f7c
 8001ef8:	08001f8c 	.word	0x08001f8c

08001efc <__libc_init_array>:
 8001efc:	b570      	push	{r4, r5, r6, lr}
 8001efe:	2600      	movs	r6, #0
 8001f00:	4d0c      	ldr	r5, [pc, #48]	; (8001f34 <__libc_init_array+0x38>)
 8001f02:	4c0d      	ldr	r4, [pc, #52]	; (8001f38 <__libc_init_array+0x3c>)
 8001f04:	1b64      	subs	r4, r4, r5
 8001f06:	10a4      	asrs	r4, r4, #2
 8001f08:	42a6      	cmp	r6, r4
 8001f0a:	d109      	bne.n	8001f20 <__libc_init_array+0x24>
 8001f0c:	2600      	movs	r6, #0
 8001f0e:	f000 f821 	bl	8001f54 <_init>
 8001f12:	4d0a      	ldr	r5, [pc, #40]	; (8001f3c <__libc_init_array+0x40>)
 8001f14:	4c0a      	ldr	r4, [pc, #40]	; (8001f40 <__libc_init_array+0x44>)
 8001f16:	1b64      	subs	r4, r4, r5
 8001f18:	10a4      	asrs	r4, r4, #2
 8001f1a:	42a6      	cmp	r6, r4
 8001f1c:	d105      	bne.n	8001f2a <__libc_init_array+0x2e>
 8001f1e:	bd70      	pop	{r4, r5, r6, pc}
 8001f20:	00b3      	lsls	r3, r6, #2
 8001f22:	58eb      	ldr	r3, [r5, r3]
 8001f24:	4798      	blx	r3
 8001f26:	3601      	adds	r6, #1
 8001f28:	e7ee      	b.n	8001f08 <__libc_init_array+0xc>
 8001f2a:	00b3      	lsls	r3, r6, #2
 8001f2c:	58eb      	ldr	r3, [r5, r3]
 8001f2e:	4798      	blx	r3
 8001f30:	3601      	adds	r6, #1
 8001f32:	e7f2      	b.n	8001f1a <__libc_init_array+0x1e>
 8001f34:	08001f9c 	.word	0x08001f9c
 8001f38:	08001f9c 	.word	0x08001f9c
 8001f3c:	08001f9c 	.word	0x08001f9c
 8001f40:	08001fa0 	.word	0x08001fa0

08001f44 <memset>:
 8001f44:	0003      	movs	r3, r0
 8001f46:	1882      	adds	r2, r0, r2
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d100      	bne.n	8001f4e <memset+0xa>
 8001f4c:	4770      	bx	lr
 8001f4e:	7019      	strb	r1, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	e7f9      	b.n	8001f48 <memset+0x4>

08001f54 <_init>:
 8001f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f5a:	bc08      	pop	{r3}
 8001f5c:	469e      	mov	lr, r3
 8001f5e:	4770      	bx	lr

08001f60 <_fini>:
 8001f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f66:	bc08      	pop	{r3}
 8001f68:	469e      	mov	lr, r3
 8001f6a:	4770      	bx	lr
